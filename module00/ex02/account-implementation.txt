/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*    Account.cpp                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kmoundir <kmoundir@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/20 14:35:57 by kmoundir          #+#    #+#             */
/*   Updated: 2025/03/20 14:35:58 by kmoundir         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "Account.hpp"
#include <iostream>
#include <ctime>
#include <iomanip>

// Initialize static variables
int Account::_nbAccounts = 0;
int Account::_totalAmount = 0;
int Account::_totalNbDeposits = 0;
int Account::_totalNbWithdrawals = 0;

// Display timestamp in format [YYYYMMDD_HHMMSS]
void Account::_displayTimestamp(void) {
    std::time_t now = std::time(nullptr);
    std::tm* local_time = std::localtime(&now);
    
    std::cout << "[";
    std::cout << (local_time->tm_year + 1900);
    std::cout << std::setfill('0') << std::setw(2) << (local_time->tm_mon + 1);
    std::cout << std::setfill('0') << std::setw(2) << local_time->tm_mday;
    std::cout << "_";
    std::cout << std::setfill('0') << std::setw(2) << local_time->tm_hour;
    std::cout << std::setfill('0') << std::setw(2) << local_time->tm_min;
    std::cout << std::setfill('0') << std::setw(2) << local_time->tm_sec;
    std::cout << "] ";
}

// Constructor with initial deposit
Account::Account(int initial_deposit) {
    _accountIndex = _nbAccounts;
    _amount = initial_deposit;
    _nbDeposits = 0;
    _nbWithdrawals = 0;
    
    _nbAccounts++;
    _totalAmount += initial_deposit;
    
    _displayTimestamp();
    std::cout << "index:" << _accountIndex << ";";
    std::cout << "amount:" << _amount << ";";
    std::cout << "created" << std::endl;
}

// Destructor
Account::~Account(void) {
    _displayTimestamp();
    std::cout << "index:" << _accountIndex << ";";
    std::cout << "amount:" << _amount << ";";
    std::cout << "closed" << std::endl;
}

// Display account information for all accounts
void Account::displayAccountsInfos(void) {
    _displayTimestamp();
    std::cout << "accounts:" << _nbAccounts << ";";
    std::cout << "total:" << _totalAmount << ";";
    std::cout << "deposits:" << _totalNbDeposits << ";";
    std::cout << "withdrawals:" << _totalNbWithdrawals << std::endl;
}

// Display status for a specific account
void Account::displayStatus(void) const {
    _displayTimestamp();
    std::cout << "index:" << _accountIndex << ";";
    std::cout << "amount:" << _amount << ";";
    std::cout << "deposits:" << _nbDeposits << ";";
    std::cout << "withdrawals:" << _nbWithdrawals << std::endl;
}

// Make a deposit
void Account::makeDeposit(int deposit) {
    int previous_amount = _amount;
    _amount += deposit;
    _nbDeposits++;
    
    _totalAmount += deposit;
    _totalNbDeposits++;
    
    _displayTimestamp();
    std::cout << "index:" << _accountIndex << ";";
    std::cout << "p_amount:" << previous_amount << ";";
    std::cout << "deposit:" << deposit << ";";
    std::cout << "amount:" << _amount << ";";
    std::cout << "nb_deposits:" << _nbDeposits << std::endl;
}

// Make a withdrawal
bool Account::makeWithdrawal(int withdrawal) {
    _displayTimestamp();
    std::cout << "index:" << _accountIndex << ";";
    std::cout << "p_amount:" << _amount << ";";
    
    if (withdrawal > _amount) {
        std::cout << "withdrawal:refused" << std::endl;
        return false;
    }
    
    _amount -= withdrawal;
    _nbWithdrawals++;
    
    _totalAmount -= withdrawal;
    _totalNbWithdrawals++;
    
    std::cout << "withdrawal:" << withdrawal << ";";
    std::cout << "amount:" << _amount << ";";
    std::cout << "nb_withdrawals:" << _nbWithdrawals << std::endl;
    
    return true;
}

// Check account balance
int Account::checkAmount(void) const {
    return _amount;
}

// Get total number of accounts
int Account::getNbAccounts(void) {
    return _nbAccounts;
}

// Get total amount in all accounts
int Account::getTotalAmount(void) {
    return _totalAmount;
}

// Get total number of deposits across all accounts
int Account::getNbDeposits(void) {
    return _totalNbDeposits;
}

// Get total number of withdrawals across all accounts
int Account::getNbWithdrawals(void) {
    return _totalNbWithdrawals;
}
